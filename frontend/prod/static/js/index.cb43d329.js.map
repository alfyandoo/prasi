{"version":3,"file":"static/js/index.cb43d329.js","sources":["/Users/riz/Developer/prasi/frontend/src/utils/react/define-store.tsx","/Users/riz/Developer/prasi/frontend/src/nova/prod/loader/base.tsx","/Users/riz/Developer/prasi/frontend/src/utils/types/general.ts","/Users/riz/Developer/prasi/frontend/src/base/load/proxy.ts","/Users/riz/Developer/prasi/frontend/src/base/load/api/api-proxy-def.tsx","/Users/riz/Developer/prasi/frontend/src/base/load/api/api-proxy.tsx","/Users/riz/Developer/prasi/frontend/src/base/load/db/db-proxy.tsx","/Users/riz/Developer/prasi/frontend/src/nova/prod/root/prasi-window.ts","/Users/riz/Developer/prasi/frontend/src/nova/prod/loader/route.tsx","/Users/riz/Developer/prasi/frontend/src/nova/prod/root/store.tsx","/Users/riz/Developer/prasi/frontend/src/nova/prod/components/router.tsx","/Users/riz/Developer/prasi/frontend/src/nova/prod/components/root.tsx","/Users/riz/Developer/prasi/backend/utils/src/wait-until.ts","/Users/riz/Developer/prasi/frontend/src/utils/react/define-window.ts","/Users/riz/Developer/prasi/frontend/src/utils/react/define-react.ts","/Users/riz/Developer/prasi/frontend/src/nova/prod/root/main.tsx"],"sourcesContent":["import { produce, current, Draft } from \"immer\";\nimport {\n  Context,\n  createContext,\n  FC,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\n\nconst default_ctx = { ctx: {}, render() {} };\nconst store_ctx = createContext<{\n  ctx: Record<string, { ref: any; state: any }>;\n  render: () => void;\n}>(default_ctx);\n\nexport const StoreProvider = ({ children }: { children: any }) => {\n  const [_, render] = useState({});\n\n  return (\n    <store_ctx.Provider\n      value={{\n        ...default_ctx,\n        render() {\n          render({});\n        },\n      }}\n    >\n      {children}\n    </store_ctx.Provider>\n  );\n};\n\nexport const defineStore = function <\n  R,\n  T,\n  K extends { [V in string]: (...arg: any[]) => void | boolean },\n  D,\n>(init: {\n  name: string;\n  state: T;\n  ref?: R;\n  action: (arg: {\n    ref: R;\n    state: Draft<T>;\n    current: (val: any) => any;\n    update: (fn: (state: Draft<T>) => void) => void;\n  }) => K;\n  effect?: (arg: { state: DeepReadonly<T> }) => {\n    deps: any[];\n    effect: (arg: {\n      state: DeepReadonly<T>;\n      action: K;\n      update: (fn: (state: Draft<T>) => void) => void;\n    }) => Promise<void>;\n    cleanup?: () => void;\n  }[];\n}) {\n  return <Z extends object>(\n    selector: (arg: { ref: R; state: DeepReadonly<T>; action: K }) => Z\n  ) => {\n    const internal = useRef({\n      mounted: true,\n    });\n\n    const store = useContext(store_ctx);\n    const ctx = store.ctx;\n    const render = store.render;\n    if (!ctx[init.name]) {\n      ctx[init.name] = { state: init.state, ref: init.ref || {} };\n    }\n\n    const state = ctx[init.name].state;\n    const ref = ctx[init.name].ref;\n\n    const set = (value: any) => {\n      ctx[init.name].state = value;\n      render();\n    };\n\n    const selection = selector({\n      ref,\n      state,\n      action: createAction(internal.current, ref, state, set, init.action),\n    }) as Z & { RenderBoundary: FC<{ children: any }> };\n\n    if (init.effect) {\n      const effects = init.effect({ state });\n\n      for (const e of effects) {\n        useEffect(() => {\n          internal.current.mounted = true;\n          e.effect({\n            action: createAction(\n              internal.current,\n              ref,\n              state,\n              set,\n              init.action\n            ),\n            state,\n            update(fn) {\n              set(produce(state, fn));\n            },\n          });\n          return () => {\n            internal.current.mounted = false;\n            if (e.cleanup) {\n              e.cleanup();\n            }\n          };\n        }, e.deps);\n      }\n    }\n\n    useEffect(() => {\n      internal.current.mounted = true;\n      return () => {\n        internal.current.mounted = false;\n      };\n    }, Object.values(selection));\n\n    return { ...selection };\n  };\n};\n\nconst createAction = (\n  cur: { mounted: boolean },\n  ref: any,\n  state: any,\n  set: any,\n  action: (arg: {\n    state: any;\n    ref: any;\n    current: (val: any) => any;\n    update: (fn: (state: any) => void) => void;\n  }) => any\n) => {\n  return new Proxy(\n    {},\n    {\n      get(target, p, receiver) {\n        return function (...arg: any[]) {\n          if (cur.mounted) {\n            set(\n              produce(state, (draft: any) => {\n                (\n                  action({\n                    ref,\n                    state: draft,\n                    current,\n                    update(fn) {\n                      set(\n                        produce(state, (draft: any) => {\n                          fn(draft);\n                        })\n                      );\n                    },\n                  }) as any\n                )[p].bind(createAction(cur, ref, state, set, action))(...arg);\n              })\n            );\n          }\n        };\n      },\n    }\n  ) as any;\n};\n\ntype DeepReadonly<T> = Readonly<{\n  [K in keyof T]: T[K] extends number | string | symbol\n    ? Readonly<T[K]>\n    : Readonly<DeepReadonly<T[K]>>;\n}>;\n","import { w } from \"prod/root/prasi-window\";\nimport { RadixRouter } from \"radix3\";\nimport { IItem } from \"../../../utils/types/item\";\nimport { IRoot } from \"../../../utils/types/root\";\nimport { PG } from \"../../ed/logic/ed-global\";\n\nexport const base = {\n  root: null as unknown as URL,\n  url(...arg: any[]) {\n    const pathname = arg\n      .map((e) => (Array.isArray(e) ? e.join(\"\") : e))\n      .join(\"\");\n\n    let base_url = this.root.toString();\n    if (base_url.endsWith(\"/\"))\n      base_url = base_url.substring(0, base_url.length - 1);\n\n    if (pathname.startsWith(\"/\")) return base_url + pathname;\n    else {\n      return base_url + \"/\" + pathname;\n    }\n  },\n  get pathname() {\n    const res = location.pathname.substring(base.root.pathname.length);\n    if (!res.startsWith(\"/\")) return `/${res}`;\n    return res;\n  },\n  site: { id: w._prasi?.site_id } as {\n    id: string;\n    name: string;\n    responsive: PG[\"site\"][\"responsive\"];\n    domain: string;\n    api_url: string;\n    code: {\n      mode: \"new\" | \"vsc\";\n    };\n    api: any;\n    db: any;\n  },\n  init_local_effect: {} as any,\n  mode: \"\" as \"desktop\" | \"mobile\",\n  route: {\n    status: \"init\" as \"init\" | \"loading\" | \"ready\",\n    pages: [] as { id: string; url: string }[],\n    router: null as null | RadixRouter<{ id: string; url: string }>,\n  },\n  comp: {\n    list: {} as Record<string, IItem>,\n    pending: {} as Record<string, IItem[]>,\n  },\n  layout: {\n    id: \"\",\n    root: null as null | IRoot,\n  },\n  cache: {\n    urls: new Set<string>(),\n  },\n  page: {\n    id: \"\",\n    url: \"\",\n    root: null as null | IRoot,\n    cache: {} as Record<\n      string,\n      {\n        id: string;\n        url: string;\n        root: IRoot;\n      }\n    >,\n  },\n};\n\nexport const initBaseConfig = () => {\n  if (!base.root) {\n    let url = new URL(location.href);\n    if (w._prasi.basepath) {\n      url.pathname = w._prasi.basepath;\n    }\n\n    base.root = new URL(`${url.protocol}//${url.host}${url.pathname}`);\n    if (base.root.pathname.endsWith(\"/\")) {\n      base.root.pathname = base.root.pathname.substring(\n        0,\n        base.root.length - 1\n      );\n    }\n  }\n};\n","import { PrismaClient } from \"prasi-db\";\n\nexport type PageProps = {\n  pathname: string;\n  domain: string;\n  params: any;\n};\n\nexport type PrasiAPI = {\n  apiEntry: any;\n  prismaTypes?: {\n    \"prisma.d.ts\": string;\n    \"runtime/library.d.ts\": string;\n    \"runtime/index.d.ts\": string;\n  };\n  apiTypes?: string;\n};\n\ndeclare global {\n  const _db: PrismaClient;\n}\nexport {};\n\nexport const w = window as unknown as {\n  isEditor: boolean;\n  isMobile: boolean;\n  basehost?: string;\n  basepath: string;\n  navigateOverride: (s: string) => string;\n  isDesktop: boolean;\n  prasiApi: Record<string, PrasiAPI>;\n  prasiContext: {\n    render: () => void;\n    renderEditor?: () => void;\n    afterEditorRender?: () => void;\n  };\n  loadedFonts: string[];\n  prasiApiDbPull: boolean;\n  mobile?: any;\n  params: any;\n  editorGlbDefault: string;\n  ts: number;\n  serverurl: string;\n  apiurl: string;\n  _api: any;\n  _db: any;\n  offline: boolean;\n  sync_too_long: boolean;\n  editorRender?: () => void;\n  debug: {\n    on: any;\n    off: any;\n  };\n  pointer_active: boolean;\n};\n","import axios from \"axios\";\n\n(BigInt.prototype as any).toJSON = function (): string {\n  return `BigInt::` + this.toString();\n};\nlet w = (typeof window !== \"undefined\" ? window : null) as any;\nlet g = (typeof global !== \"undefined\" ? global : undefined) as any;\n\nexport const fetchViaProxy = async (\n  target_url: string,\n  data?: any,\n  _headers?: any,\n  parse_json?: boolean\n) => {\n  const headers = { ..._headers };\n\n  let body = null as any;\n  let isFile = false;\n  let uploadProgress = null as any;\n\n  const files: File[] = [];\n  if (Array.isArray(data)) {\n    for (const item of data) {\n      if (item instanceof File) {\n        files.push(item);\n        isFile = true;\n      }\n      if (typeof item === \"function\") {\n        uploadProgress = item;\n      }\n    }\n  } else if (data instanceof File) {\n    isFile = true;\n    files.push(data);\n  }\n\n  if (!isFile) {\n    body = JSON.stringify(data);\n    headers[\"content-type\"] = \"aplication/json\";\n  } else {\n    const fd = new FormData();\n    for (const file of files) {\n      fd.append(file.name, file);\n    }\n    body = fd;\n    delete headers[\"content-type\"];\n    headers[\"enctype\"] = `multipart/form-data;`;\n  }\n\n  const to_url = new URL(target_url);\n\n  if (w !== null) {\n    const cur_url = new URL(location.href);\n    let final_url = \"\";\n\n    if (\n      // to_url.hostname === 'localhost' ||\n      to_url.host === cur_url.host ||\n      (!!g && typeof g.server_hook === \"function\")\n    ) {\n      final_url = to_url.toString();\n    } else {\n      final_url = `${cur_url.protocol}//${\n        cur_url.host\n      }/_proxy/${encodeURIComponent(to_url.toString())}`;\n    }\n\n    if (final_url) {\n      if (uploadProgress) {\n        const res = await axios({\n          method: data ? \"post\" : undefined,\n          url: final_url,\n          data: body,\n          onUploadProgress: uploadProgress,\n        });\n\n        return res.data;\n      } else {\n        const res = await fetch(\n          final_url,\n          data\n            ? {\n                method: \"POST\",\n                body,\n                headers,\n              }\n            : undefined\n        );\n        const raw = await res.text();\n        if (parse_json === false) return raw;\n\n        try {\n          return JSON.parse(raw, replacer);\n        } catch (e) {\n          return raw;\n        }\n      }\n    }\n  }\n\n  const res = await fetch(\n    to_url,\n    data\n      ? {\n          method: \"POST\",\n          body,\n          headers,\n        }\n      : undefined\n  );\n  const raw = await res.text();\n  try {\n    return JSON.parse(raw, replacer);\n  } catch (e) {\n    return raw;\n  }\n};\n\nconst replacer = (key: string, value: string) => {\n  if (typeof value === \"string\" && value.startsWith(\"BigInt::\")) {\n    return BigInt(value.substring(8));\n  }\n  return value;\n};\n\nexport const getProxyUrl = (target_url: string) => {\n  const to_url = new URL(target_url);\n\n  if (w !== null) {\n    const cur_url = new URL(location.href);\n    let final_url = \"\";\n\n    if (\n      // to_url.hostname === 'localhost' ||\n      to_url.host === cur_url.host ||\n      (!!g && typeof g.server_hook === \"function\")\n    ) {\n      final_url = to_url.toString();\n    } else {\n      final_url = `${cur_url.protocol}//${\n        cur_url.host\n      }/_proxy/${encodeURIComponent(to_url.toString())}`;\n    }\n    return final_url;\n  }\n  return to_url;\n};\n","import trim from \"lodash.trim\";\n\nexport const loadApiProxyDef = async (_url: string, with_types: boolean) => {\n  const url = trim(_url, \"/\");\n\n  await new Promise<void>((done) => {\n    const d = document;\n    const script = d.createElement(\"script\");\n    script.onload = async () => {\n      done();\n    };\n\n    if (!localStorage.getItem(\"api-ts-\" + url)) {\n      localStorage.setItem(\"api-ts-\" + url, Date.now().toString());\n    }\n\n    const url_target = new URL(url);\n    const url_cur = new URL(location.href);\n\n    url_cur.hash = \"\";\n    url_target.hash = \"\";\n    let is_remote = \"\";\n    if (url_target.host !== url_cur.host) {\n      is_remote = \"&remote=1\";\n    }\n\n    url_cur.pathname = \"\";\n    let cur_url = trim(url_cur.toString(), \"/\");\n    if (with_types) {\n      script.src = `${cur_url}/_prasi/load.js?url=${url}&v3&dev=1${is_remote}`;\n    } else {\n      script.src = `${cur_url}/_prasi/load.js?url=${url}&v3${is_remote}`;\n    }\n    script.onerror = () => {\n      done();\n    };\n\n    if (!document.querySelector(`script[src=\"${script.src}\"]`)) {\n      d.body.appendChild(script);\n    } else {\n      done();\n    }\n  });\n};\n\nconst baseUrl = (url: string) => {\n  const base = new URL(url);\n\n  return `${base.protocol}//${base.host}`;\n};\n\nconst urlPath = (url: string, pathname: string) => {\n  const base = new URL(url);\n  base.pathname = pathname;\n  return base.toString();\n};\n\nconst loadText = async (url: string, v2?: boolean) => {\n  const res = await fetch(url);\n  return await res.text();\n};\n","import { w } from \"../../../utils/types/general\";\nimport { fetchViaProxy } from \"../proxy\";\nimport { loadApiProxyDef } from \"./api-proxy-def\";\n\nexport type ApiProxy<T extends Record<string, any> = {}> = any;\n\nconst apiProxyLoaded: Record<string, Promise<void>> = {};\n\nexport const apiProxy = (api_url: string) => {\n  if (!w.prasiApi) {\n    w.prasiApi = {};\n  }\n\n  try {\n    const base = new URL(api_url);\n    let base_url = `${base.protocol}//${base.host}`;\n    if (!w.prasiApi[base_url]) {\n      if (!apiProxyLoaded[base_url]) {\n        apiProxyLoaded[base_url] = loadApiProxyDef(\n          base_url,\n          location.hostname.includes(\"prasi\")\n        );\n      }\n    }\n\n    return new Proxy(\n      {},\n      {\n        get: (_, actionName: string) => {\n          if (actionName === \"_url\") {\n            return (pathname: string, proxy?: boolean) => {\n              const to_url = new URL(base_url);\n              to_url.pathname = pathname\n                .split(\"/\")\n                .filter((e) => e)\n                .join(\"/\");\n\n              const cur_url = new URL(location.href);\n              let final_url = \"\";\n\n              if (to_url.host === cur_url.host || proxy === false) {\n                final_url = to_url.toString();\n              } else {\n                final_url = `${cur_url.protocol}//${\n                  cur_url.host\n                }/_proxy/${encodeURIComponent(to_url.toString())}`;\n              }\n              return final_url;\n            };\n          }\n\n          const createFn = (actionName: string) => {\n            return function (\n              this: { api_url: string } | undefined,\n              ...rest: any\n            ) {\n              return new Promise<any>(async (resolve, reject) => {\n                try {\n                  let api_ref = w.prasiApi[base_url];\n\n                  if (\n                    !api_ref &&\n                    apiProxyLoaded &&\n                    typeof apiProxyLoaded[base_url] === \"object\"\n                  ) {\n                    await apiProxyLoaded[base_url];\n                    api_ref = w.prasiApi[base_url];\n                  }\n\n                  if (api_ref) {\n                    if (Object.keys(api_ref).length === 0) {\n                      const url = `${base_url}/${actionName}`;\n\n                      const result = await fetchSendApi(url, rest);\n                      resolve(result);\n                      return;\n                    }\n\n                    if (actionName === \"_raw\") {\n                      const pathname = rest[0];\n                      const url = `${base_url}${pathname}`;\n\n                      const result = await fetchSendApi(url, rest.slice(1));\n                      resolve(result);\n                      return;\n                    }\n\n                    if (!api_ref.apiEntry) api_ref.apiEntry = {};\n                    if (api_ref.apiEntry && !api_ref.apiEntry[actionName]) {\n                      reject(\n                        `API ${actionName.toString()} not found, existing API: \\n   - ${Object.keys(\n                          api_ref.apiEntry || {}\n                        ).join(\"\\n   - \")}`\n                      );\n                      return;\n                    }\n\n                    let actionUrl = api_ref.apiEntry[actionName].url;\n                    const actionParams = api_ref.apiEntry[actionName].args;\n                    if (actionUrl && actionParams) {\n                      if (rest.length > 0 && actionParams.length > 0) {\n                        for (const [idx, p] of Object.entries(rest)) {\n                          const paramName = actionParams[parseInt(idx)];\n                          if (\n                            actionParams &&\n                            actionParams.includes(paramName)\n                          ) {\n                            if (\n                              !!p &&\n                              typeof p !== \"string\" &&\n                              typeof p !== \"number\"\n                            ) {\n                              continue;\n                            }\n                          }\n                          actionUrl = actionUrl.replace(\n                            `:${paramName}?`,\n                            p + \"\"\n                          );\n                          actionUrl = actionUrl.replace(\n                            `:${paramName}`,\n                            p + \"\"\n                          );\n                        }\n                      }\n\n                      const url = `${base_url}${actionUrl}`;\n\n                      const result = await fetchSendApi(url, rest);\n                      resolve(result);\n                    } else {\n                      console.error(`API Not Found: ${actionName.toString()}`);\n                    }\n                  } else {\n                    reject(\"Failed to load API [Proxy]: \" + base_url);\n                  }\n                } catch (e) {\n                  reject(e);\n                }\n              });\n            };\n          };\n          if (actionName === \"then\") {\n            return new Proxy(\n              {},\n              {\n                get: (_, actionName: string) => {\n                  return createFn(actionName);\n                },\n              }\n            );\n          }\n\n          return createFn(actionName);\n        },\n      }\n    );\n  } catch (e) {\n    return null;\n  }\n};\n\nconst fetchSendApi = async (url: string, params: any) => {\n  return await fetchViaProxy(url, params, {\n    \"content-type\": \"application/json\",\n  });\n};\n","import hash_sum from \"hash-sum\";\nimport { get, set } from \"idb-keyval\";\nimport { pack } from \"msgpackr\";\nimport pako, { gzip } from \"pako\";\nimport { fetchViaProxy, getProxyUrl } from \"../proxy\";\n\nconst schema_promise = {\n  tables: {} as Record<string, any>,\n  columns: {} as Record<string, any>,\n  rels: {} as Record<string, any>,\n};\n\nconst db_mode = {} as Record<string, \"msgpack\" | \"json\">;\n\nexport const dbProxy = (dburl: string) => {\n  const name = \"\";\n\n  if (!db_mode[dburl]) {\n    fetchSendDb(\n      {\n        table: \"check\",\n        action: \"check\",\n      },\n      dburl\n    ).then((res) => {\n      if (res && res.mode === \"encrypted\") {\n        db_mode[dburl] = \"msgpack\";\n      } else {\n        db_mode[dburl] = \"json\";\n      }\n    });\n  }\n\n  return new Proxy(\n    {},\n    {\n      get(_, table: string) {\n        if (table === \"_batch\") {\n          return {\n            update: async (batch: any) => {\n              return fetchSendDb(\n                {\n                  name,\n                  action: \"batch_update\",\n                  table: \"\",\n                  params: { batch },\n                },\n                dburl\n              );\n            },\n            upsert: async (arg: any) => {\n              return fetchSendDb(\n                {\n                  name,\n                  action: \"batch_upsert\",\n                  table: \"\",\n                  params: { arg },\n                },\n                dburl\n              );\n            },\n          };\n        }\n        if (table === \"_schema\") {\n          return {\n            tables: async () => {\n              if (!schema_promise.tables[dburl]) {\n                schema_promise.tables[dburl] = fetchSendDb(\n                  {\n                    name,\n                    action: \"schema_tables\",\n                    table: \"\",\n                    params: [],\n                  },\n                  dburl\n                );\n              }\n\n              return await schema_promise.tables[dburl];\n            },\n            columns: async (table: string) => {\n              if (!schema_promise.columns[dburl + \"_\" + table]) {\n                schema_promise.columns[dburl + \"_\" + table] = fetchSendDb(\n                  {\n                    name,\n                    action: \"schema_columns\",\n                    table,\n                    params: [],\n                  },\n                  dburl\n                );\n              }\n\n              return await schema_promise.columns[dburl + \"_\" + table];\n            },\n            rels: async (table: string) => {\n              if (!schema_promise.rels[dburl + \"_\" + table]) {\n                schema_promise.rels[dburl + \"_\" + table] = fetchSendDb(\n                  {\n                    name,\n                    action: \"schema_rels\",\n                    table,\n                    params: [],\n                  },\n                  dburl\n                );\n              }\n\n              return await schema_promise.rels[dburl + \"_\" + table];\n            },\n          };\n        }\n\n        if (table.startsWith(\"$\")) {\n          return (...params: any[]) => {\n            const bytes = pako.gzip(JSON.stringify(params));\n\n            return fetchSendDb(\n              {\n                name,\n                action: \"query\",\n                table,\n                params: btoa(\n                  bytes.reduce(\n                    (acc, current) => acc + String.fromCharCode(current),\n                    \"\"\n                  )\n                ),\n              },\n              dburl\n            );\n          };\n        }\n\n        return new Proxy(\n          {},\n          {\n            get(_, action: string) {\n              return async (...params: any[]) => {\n                if (table === \"query\") {\n                  table = action;\n                  action = \"query\";\n                }\n                return await fetchSendDb(\n                  {\n                    name,\n                    action,\n                    table,\n                    params,\n                  },\n                  dburl\n                );\n              };\n            },\n          }\n        );\n      },\n    }\n  );\n};\n\nconst editorQueryLoaded: Record<string, true> = {};\n\nexport const fetchSendDb = async (\n  _params: Record<string, any>,\n  dburl: string\n) => {\n  const base = new URL(dburl);\n  base.pathname = `/_dbs`;\n  const params = _params || {};\n\n  if (params.table) {\n    base.pathname += `/${params.table}`;\n  }\n  const url = base.toString();\n\n  if (typeof localStorage !== \"undefined\" && localStorage.mlsid) {\n    params.mlsid = localStorage.mlsid;\n  }\n\n  const hsum = hash_sum({ ...params, dburl });\n\n  let isEditor = false;\n  if (\n    typeof location !== \"undefined\" &&\n    base.hostname !== location.hostname &&\n    (window as any).isEditor &&\n    [\"prasi.avolut.com\", \"localhost:4550\", \"127.0.0.1:4550\"].includes(\n      location.host\n    )\n  )\n    isEditor = true;\n\n  const load = async () => {\n    let body: any = params;\n    let result = null;\n    if (db_mode[dburl] === \"msgpack\") {\n      body = gzip(pack(params), {});\n      const res = await fetch(getProxyUrl(url), { method: \"POST\", body });\n      result = await res.json();\n    } else {\n      result = await fetchViaProxy(\n        url,\n        body,\n        {\n          \"content-type\": \"application/json\",\n        },\n        false\n      );\n    }\n\n    try {\n      if (typeof result === \"string\") return JSON.parse(result);\n    } catch (e) {}\n    return result;\n  };\n\n  if (isEditor) {\n    let result = await get(`editor-db-cache-${hsum}`);\n    if (!result) {\n      result = await load();\n      editorQueryLoaded[hsum] = true;\n      set(`editor-db-cache-${hsum}`, result);\n    } else {\n      if (!editorQueryLoaded[hsum]) {\n        load().then((result) => {\n          set(`editor-db-cache-${hsum}`, result);\n        });\n        editorQueryLoaded[hsum] = true;\n      }\n    }\n\n    return result;\n  }\n\n  return await load();\n};\n","import { FC } from \"react\";\n\nexport const w = window as unknown as {\n  prasiContext: {\n    global: any;\n    render: () => void;\n  };\n  params: any;\n  navigateOverride: (href: string) => void;\n  pointerActive: boolean;\n  ContentLoading?: FC;\n  ContentNotFound?: FC;\n  _prasi: {\n    basepath: string;\n    site_id: string;\n    page_id?: string;\n    params?: any;\n    routed?: {\n      page_id?: string;\n      params?: any;\n    };\n  };\n};\n","import { apiProxy } from \"base/load/api/api-proxy\";\nimport { dbProxy } from \"base/load/db/db-proxy\";\nimport { createRouter } from \"radix3\";\nimport { base } from \"./base\";\n\nconst cached = { route: null as any, promise: null as any };\n\nconst loadCachedRoute = () => {\n  if (cached.promise) return cached.promise;\n  cached.promise = new Promise<{\n    site: any;\n    urls: {\n      id: string;\n      url: string;\n    }[];\n    layout: any;\n  }>(async (done) => {\n    if (cached.route) done(cached.route);\n\n    const res = await fetch(base.url`_prasi/route`);\n    if (!res.headers.get(\"content-encoding\")) {\n      fetch(base.url`_prasi/compress/only-gz`);\n    }\n\n    cached.route = await res.json();\n    done(cached.route);\n  });\n  return cached.promise;\n};\n\nexport const loadRouter = async () => {\n  const router = createRouter<{ id: string; url: string }>();\n  const pages = [] as { id: string; url: string }[];\n  try {\n    const res = await loadCachedRoute();\n\n    if (res && res.site && res.urls) {\n      if (res.layout) {\n        base.layout.id = res.layout.id;\n        base.layout.root = res.layout.root;\n      }\n\n      base.site = res.site;\n\n      base.site.code = { mode: \"vsc\" };\n\n      base.site.api = apiProxy(base.site.api_url);\n      base.site.db = dbProxy(base.site.api_url);\n\n      const w = window as any;\n      w.serverurl = base.site.api_url;\n      w.db = base.site.db;\n      w.api = base.site.api;\n\n      for (const item of res.urls) {\n        router.insert(item.url, item);\n        pages.push(item);\n      }\n    }\n  } catch (e) {}\n\n  return { router, pages };\n};\n\nexport type ProdRouter = Awaited<ReturnType<typeof loadRouter>>;\n","import { loadRouter, ProdRouter } from \"prod/loader/route\";\nimport { defineStore } from \"utils/react/define-store\";\n\nexport const useProd = defineStore({\n  name: \"prod-store\",\n  ref: {\n    router: null as null | ProdRouter[\"router\"],\n  },\n  state: {\n    pages: null as null | ProdRouter[\"pages\"],\n    status: {\n      router: \"init\" as \"init\" | \"loading\" | \"ready\",\n    },\n  },\n  action: ({ state: s, update, ref: r }) => ({\n    init() {\n      if (s.status.router === \"init\") {\n        s.status.router = \"loading\";\n        loadRouter().then(({ router, pages }) => {\n          update((s) => {\n            s.status.router = \"ready\";\n            r.router = router;\n            s.pages = pages;\n          });\n        });\n      }\n    },\n  }),\n});\n","import { StoreProvider } from \"../../../utils/react/define-store\";\nimport { useProd } from \"../root/store\";\n\nexport const ProdRouter = () => {\n  const { router, status, init } = useProd(({ ref, state, action }) => ({\n    router: ref.router,\n    status: state.status,\n    init: action.init,\n  }));\n  if (status.router === \"init\") init();\n  console.log(\"router\");\n\n  return (\n    <>\n      {status.router}\n      {router?.ctx.rootNode.type}\n    </>\n  );\n};\n","import { StoreProvider } from \"../../../utils/react/define-store\";\nimport { useProd } from \"../root/store\";\nimport { ProdRouter } from \"./router\";\n\nexport const isPreview = () => {\n  return (\n    location.hostname.split(\".\").length === 4 ||\n    location.hostname === \"prasi.app\" ||\n    location.hostname === \"prasi.avolut.com\" ||\n    location.hostname.includes(\"ngrok\") ||\n    location.hostname === \"localhost\" ||\n    location.hostname === \"127.0.0.1\" ||\n    location.hostname === \"10.0.2.2\"\n  ); // android localhost\n};\n\nexport const PrasiRoot = () => {\n  const { status, RenderBoundary } = useProd(({ state, action }) => ({\n    status: state.status.router,\n  }));\n\n  return (\n    <>\n      <RenderBoundary>\n        {Date.now()}\n        {status}\n        <hr />\n        <ProdRouter />\n      </RenderBoundary>\n    </>\n  );\n};\n","export const waitUntil = (\n  condition: number | (() => any),\n  timeout?: number\n) => {\n  return new Promise<void>(async (resolve) => {\n    if (typeof condition === \"function\") {\n      let tout = null as any;\n      if (timeout) {\n        tout = setTimeout(resolve, timeout);\n      }\n      if (await condition()) {\n        clearTimeout(tout);\n        resolve();\n        return;\n      }\n      let count = 0;\n      const c = setInterval(async () => {\n        if (await condition()) {\n          if (tout) clearTimeout(tout);\n          clearInterval(c);\n          resolve();\n        }\n        if (count > 100) {\n          clearInterval(c);\n        }\n      }, 10);\n    } else if (typeof condition === \"number\") {\n      setTimeout(() => {\n        resolve();\n      }, condition);\n    }\n  });\n};\n","import { css, extractCss } from \"goober\";\nimport { waitUntil } from \"prasi-utils\";\n\nexport const defineWindow = async (awaitServerUrl = true) => {\n  let w = typeof window === \"object\" ? window : (globalThis as any);\n\n  if (awaitServerUrl) await waitUntil(() => w.__SRV_URL__);\n\n  w.prasiContext = {\n    global: {},\n    render() {},\n  };\n\n  const location = window[\"location\"];\n\n  const host =\n      0 === location.protocol.indexOf(\"http\") ? location.hostname : \"localhost\",\n    scheme =\n      \"https:\" != location.protocol || /localhost|127.0.0.1|0.0.0.0/.test(host)\n        ? \"http\"\n        : \"https\";\n\n  if (w.__SRV_URL__) {\n    w.serverurl = w.__SRV_URL__;\n    const serverURL = new URL(w.serverurl);\n    if (\n      serverURL.hostname === \"localhost\" ||\n      serverURL.hostname === \"127.0.0.1\"\n    ) {\n      serverURL.hostname = location.hostname;\n      serverURL.pathname = serverURL.pathname === \"/\" ? \"\" : serverURL.pathname;\n      w.serverurl = serverURL.toString();\n      if (w.serverurl.endsWith(\"/\")) {\n        w.serverurl = w.serverurl.substring(0, w.serverurl.length - 1);\n      }\n    }\n  }\n\n  const port = location.port;\n  w.baseurl = scheme + \"://\" + host + (port ? \":\" + port : \"\") + \"/\";\n  if (!w.basepath) {\n    w.basepath = \"/\";\n  }\n  w.css = css;\n  w.extractCss = extractCss;\n  w.pathname = location.pathname;\n\n  w.cx = (...classNames: any[]) => {\n    const result: string[] = [];\n\n    classNames\n      .filter((e) => {\n        if (e) {\n          if (typeof e === \"string\" && e.trim()) return true;\n          else return true;\n        }\n        return false;\n      })\n      .forEach((e) => {\n        if (Array.isArray(e)) {\n          for (const f of e) {\n            if (typeof f === \"string\" && f.trim()) {\n              result.push(f.trim());\n            }\n          }\n        } else result.push(e.trim());\n      });\n    return result.join(\" \");\n  };\n\n  w.navigate = (href: string) => {\n    let _href = href;\n\n    if (typeof w.navigateOverride === \"function\") {\n      _href = w.navigateOverride(href);\n      if (!_href) return null;\n    }\n\n    history.pushState({ prevUrl: window.location.href }, \"\", _href);\n    w.pathname = href;\n\n    if (w.prasiContext && w.prasiContext.render) {\n      w.prasiContext.render();\n    }\n  };\n\n  if (typeof window === \"object\") {\n    window.addEventListener(\"popstate\", () => {\n      const sw = navigator.serviceWorker.controller;\n      if (sw) {\n        sw.postMessage({\n          type: \"add-cache\",\n          url: location.href,\n        });\n      }\n      if (w.prasiContext.popState) {\n        w.prasiContext.popState();\n        return;\n      }\n\n      if (w.preventPopRender) {\n        w.preventPopRender = false;\n        return;\n      }\n      if (w.prasiContext && w.prasiContext.render) {\n        w.pathname = location.pathname;\n        w.prasiContext.render();\n      }\n    });\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport JSXDevRuntime from \"react/jsx-dev-runtime\";\nimport JSXRuntime from \"react/jsx-runtime\";\n\nexport const defineReact = () => {\n  const w = typeof window === \"object\" ? window : (globalThis as any);\n\n  w.React = React;\n  w.ReactDOM = ReactDOM;\n  w.JSXRuntime = JSXRuntime;\n  w.JSXDevRuntime = JSXDevRuntime;\n  w.Fragment = React.Fragment;\n};\n","import { createRoot } from \"react-dom/client\";\nimport \"../../../index.css\";\nimport { PrasiRoot, isPreview } from \"../components/root\";\nimport { defineWindow } from \"utils/react/define-window\";\nimport { defineReact } from \"utils/react/define-react\";\nimport { w } from \"./prasi-window\";\nimport { initBaseConfig } from \"prod/loader/base\";\nimport { StoreProvider } from \"../../../utils/react/define-store\";\n\n(async () => {\n  import(\"./font\");\n  const div = document.getElementById(\"root\");\n  initBaseConfig();\n  if (div) {\n    await defineWindow(false);\n\n    let react = {\n      root: createRoot(div),\n    };\n    defineReact();\n\n    //#region prasi site internal (loading ui + not found)\n    try {\n      let internal_url = \"/_prasi/code/internal.js\";\n      let import_url = internal_url;\n      if (location.pathname.startsWith(\"/prod\")) {\n        const patharr = location.pathname.split(\"/\");\n        import_url = `/prod/${patharr[2]}${internal_url}`;\n      }\n      let prasi_internal = false as any;\n\n      try {\n        const import_await = new Function(`return import(\"${import_url}\")`);\n        prasi_internal = await import_await();\n      } catch (e) {\n        console.error(e);\n      }\n      if (typeof prasi_internal === \"object\") {\n        if (prasi_internal.Loading) w.ContentLoading = prasi_internal.Loading;\n        if (prasi_internal.NotFound)\n          w.ContentNotFound = prasi_internal.NotFound;\n      }\n    } catch (e) {}\n    //#endregion\n\n    w.navigateOverride = (_href: string) => {\n      if (_href && _href.startsWith(\"/\")) {\n        if (isPreview()) {\n          if (\n            location.pathname.startsWith(\"/prod\") &&\n            !_href.startsWith(\"/prod\")\n          ) {\n            const patharr = location.pathname.split(\"/\");\n            _href = `/prod/${patharr[2]}${_href}`;\n          }\n        }\n      }\n      return _href;\n    };\n\n    react.root.render(\n      <StoreProvider>\n        <PrasiRoot />\n      </StoreProvider>\n    );\n    if (document.body.classList.contains(\"opacity-0\")) {\n      document.body.classList.remove(\"opacity-0\");\n    }\n  }\n})();\n"],"names":["init","_w__prasi","w","window","BigInt","g","global","undefined","fetchViaProxy","target_url","data","_headers","parse_json","headers","body","isFile","uploadProgress","files","Array","item","File","fd","FormData","file","JSON","to_url","URL","cur_url","location","final_url","encodeURIComponent","res","axios","fetch","raw","replacer","e","key","value","getProxyUrl","loadApiProxyDef","_url","with_types","url","trim","Promise","done","d","document","script","localStorage","Date","url_target","url_cur","is_remote","apiProxyLoaded","apiProxy","api_url","base","base_url","Proxy","_","actionName","pathname","proxy","createFn","_key","schema_promise","db_mode","dbProxy","dburl","fetchSendDb","table","batch","name","arg","params","bytes","pako","btoa","acc","current","String","action","editorQueryLoaded","_params","hsum","hash_sum","isEditor","cached","loadCachedRoute","loadRouter","router","createRouter","pages","default_ctx","store_ctx","createContext","StoreProvider","children","render","useState","createAction","cur","ref","state","set","target","p","receiver","useProd","s","update","r","selector","internal","useRef","store","useContext","ctx","selection","useEffect","fn","produce","Object","ProdRouter","status","console","isPreview","PrasiRoot","RenderBoundary","waitUntil","condition","timeout","resolve","tout","setTimeout","clearTimeout","c","setInterval","clearInterval","defineWindow","awaitServerUrl","globalThis","host","scheme","serverURL","port","css","extractCss","classNames","result","f","href","_href","history","sw","navigator","defineReact","React","ReactDOM","JSXRuntime","JSXDevRuntime","div","initBaseConfig","react","createRoot","internal_url","import_url","patharr","prasi_internal","import_await","Function"],"mappings":"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"}